---
interface AlertProps {
  alerts?:[{
    type?: 'info' | 'warning' | 'error' | 'success' | 'chargue' | 'crack';
    title:string;
    paragraph:string;
  }]; // Tipo string limitado
  show?: boolean;
  onClose?: () => void | null; // Funci√≥n opcional que no devuelve nada o null
}

const { alerts=[], show = false, onClose } = Astro.props as AlertProps;


---

{
show
&&
<div class="Pupop">
  <div class="containerAlerts">
    {
      alerts.length 
      &&
      alerts.map((alert,i)=>{
        return(
          <div  class:list={["containerAlert",alert.type+"AlertBody"]}>
            <h6 class="subtitle">{alert.title}</h6>
            <p class="paragraph">{alert.paragraph}</p>
          </div>
        )
      })
    }
    
    

  </div>
</div>
}




<style>
  .Pupop{
    position: fixed;
    top: 0;
    left: 0;
    z-index: 50;
    max-height: 100vh;
    overflow-y: auto;
    overflow-x: hidden;
    box-sizing: border-box;
    padding: 5px;
    .containerAlerts{
      
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      box-sizing: border-box;
      .containerAlert{
        width: 90vw;
        max-width: 450px;
        box-sizing: border-box;
        padding: 8px;
        border-bottom-right-radius:12px;
        
        border-top-left-radius: 3px;
        background-color: #4A5568;
        margin-top: 15px;
        border: 2px solid  var(--color-silver) ;
        
        .subtitle{
          margin: 0;
          font-size: 15pt;
          font-family: "Roboto";
          font-weight: 400;
          color: var(--color-white);
        }
        .paragraph{
          font-size: 10pt;
          letter-spacing: 2.1px;
          line-height: 1.3;
          font-weight: 300;
          font-family: "Roboto";
          color:#fff;
        }

        &.infoAlertBody{
          border-color: #000 ;
          background-color: #fff;
          .subtitle{
            color: #000;
          }
          .paragraph{
            color:#222;
          }

        }
        &.warningAlertBody{
          border-color: #FACC15 ;
          background-color: #000000;
          .subtitle{
            color: #FACC15 ;
          }
          .paragraph{
            color:#fffab1;
          }
        }
        
        &.errorAlertBody{
          border-color: #E53E3E;
          background-color: #7B342E;
          .subtitle{
            color: #E53E3E;
          }
          .paragraph{
            color:#f0c2c2;
          }

        }
        
        &.sucessAlertBody{
          border-color:#32bb49;
          background-color: #496d4f;
          .subtitle{
            color: #32bb49;
          }
          .paragraph{
            color:#F7FAC9;
          }
        }

        &.chargueAlertBody{
          border-color:var(--color-blue);
          background-color: #ffffff;
          .subtitle{
            color: var(--color-blue);
          }
          .paragraph{
            color:#3477ad;
          }
        }

        &.crackAlertBody{
          border-color:#54d300;
          background-color: #000;
          .subtitle{
            color: #54d300 ;
          }
          .paragraph{
            color:#40a000;
          }
          --rerer:#66ff00;
        }
      }
    }
  }
</style>